" Always use /bin/sh for shell processes
if &shell =~# 'fish$'
  set shell=sh
endif

set hidden
map <silent> <C-n> :noh<CR>
nmap <leader>6 <C-^>
set hls is ic scs
set ts=8 sw=4 sts=4 et
nmap <leader>il :set sw=8 sts=8 noet<CR>
nmap <leader>in :set sw=4 sts=4 et<CR>
set formatoptions+=n2
set tw=80
set number
syntax enable
filetype plugin indent on

" Filetype detection for *.symlink files
" If a file begins with '#!/', let vim autodetect the filetype. Otherwise
" read 'linguist-language' from .gitattributes.
augroup symlink
  autocmd!
  autocmd BufRead,BufNewFile *.symlink
        \ if getline(1) !~ '#!/' |
        \ let &ft=split(system('git check-attr linguist-language '.shellescape(expand('%:p'))))[-1] |
        \ endif
augroup END

if exists('+colorcolumn')
    set colorcolumn=+1
endif

" Disable nanoc output directory
set wildignore+=*/.output/*

" Disable CMake build directories
set wildignore+=*/.build/*

" Disable Node.js package directories
set wildignore+=*/node_modules/*

" Disable Python build directories
set wildignore+=*/build/lib/*

" Disable cached Python modules
set wildignore+=*/__pycache__/*,*.pyc,*.pyo

" Disable output and VCS files
set wildignore+=*.a,*.o,*.la,*.lo,*.out,*.obj,.git,*.rbc,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

" Ignore virtualenvs
set wildignore+=*/.venv/*

" Ignore tox and htmlcov results
set wildignore+=*/.tox/*,*/htmlcov/*

" Ignore egg-info directories
set wildignore+=*/*.egg-info/*

set wildmode=longest,list,full
set wildmenu

set list listchars=tab:··,trail:◃,nbsp:•

" Emacs bindings in command line
" from http://statico.github.io/vim.html
:cnoremap <C-a>  <Home>
:cnoremap <C-b>  <Left>
:cnoremap <C-f>  <Right>
:cnoremap <C-d>  <Delete>
:cnoremap <M-b>  <S-Left>
:cnoremap <M-f>  <S-Right>
:cnoremap <M-d>  <S-right><Delete>
:cnoremap <Esc>b <S-Left>
:cnoremap <Esc>f <S-Right>
:cnoremap <Esc>d <S-right><Delete>
:cnoremap <C-g>  <C-c>

" clang-format support
au FileType c,cpp   map <C-I> :py3f ~/.local/share/clang/clang-format-py3.py<cr>
au FileType c,cpp   imap <C-I> <c-o>:py3f ~/.local/share/clang/clang-format-py3.py<cr>

" Rust stuff
let g:rustfmt_autosave = 1

" Airline configuration
set laststatus=2
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.branch = '⎇ '

let macvim_hig_shift_movement = 0

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" upper/lower first char of word
nmap <leader>U mQgewvU`Q
nmap <leader>L mQgewvu`Q

" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" fzf stuffs
nnoremap <C-p> :Files<CR>
nnoremap Q :Buffers<CR>
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#files('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), fzf#vim#with_preview(), <bang>0)
endif

au FileType c       setlocal formatoptions-=t
au FileType css     setlocal sw=4 sts=4
au FileType gemtext setlocal tw=0 wrap linebreak
au FileType gitcommit setlocal tw=72
au FileType go      setlocal ts=4
au FileType html    setlocal sw=2 sts=2
au FileType htmldjango  setlocal sw=2 sts=2
au FileType lua     setlocal formatoptions-=t sw=3 sts=3
au FileType python  setlocal formatoptions-=t
au FileType ragel   setlocal formatoptions-=t
au FileType ruby    setlocal sw=2 sts=2
au FileType yaml    setlocal sw=2 sts=2

au BufRead,BufNewFile PKGBUILD    set ft=sh
au BufRead,BufNewFile *.do        set ft=sh
au BufRead,BufNewFile *.json      set ft=javascript
au BufRead,BufNewFile *.pandoc    set ft=markdown
au BufRead,BufNewFile *.rockspec  set ft=lua
au BufRead,BufNewFile *.ronn      set ft=markdown
au BufRead,BufNewFile *.wfd       set ft=lua
au BufRead,BufNewFile *.wfd.error set ft=lua
au BufRead,BufNewFile *.lua.symlink  set ft=lua

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif

set backupdir=~/.vim/_backup/
set directory=~/.vim/_temp/
set viminfo='50,\"1000,n~/var/viminfo

" Color stuff

set guicursor=n-v-c-sm:block
set guicursor+=i-ci-ve:ver25
set guicursor+=r-cr-o:hor20
set guicursor+=a:blinkwait500-blinkoff500-blinkon500

set termguicolors
set background=light

function DarkColors()
    colorscheme anderson
    set background=dark
endfunction

function LightColors()
    colorscheme one
    set background=light
endfunction

call DarkColors()
nmap <leader>d :call DarkColors()<cr>
nmap <leader>l :call LightColors()<cr>
